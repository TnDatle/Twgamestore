import React, { useState, useEffect } from "react";
import "../styles/Game.css";

const categories = [
  { label: "Game PS5", value: "PS5" },
  { label: "Game PS4", value: "PS4" },
  { label: "Game Switch", value: "Switch" },
  { label: "Game Nintendo", value: "Nintendo" },
  { label: "Game Collection", value: "Collection" },
  { label: "Game Digital", value: "Digital" },
  { label: "Game Secondhand", value: "Secondhand" },
];

export default function Game() {
  const [activeCategory, setActiveCategory] = useState("PS4"); // m·∫∑c ƒë·ªãnh PS4
  const [games, setGames] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");

  // üîé H√†m l·∫•y game theo platform
  const fetchGames = async (platform) => {
    try {
      setLoading(true);
      setError("");
      const res = await fetch(`http://localhost:5000/games/${platform}`);
      const data = await res.json();

      // lu√¥n ƒë·∫£m b·∫£o d·ªØ li·ªáu l√† m·∫£ng
      setGames(Array.isArray(data) ? data : []);
    } catch (err) {
      console.error("‚ùå L·ªói khi fetch API:", err);
      setError("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu game. Vui l√≤ng th·ª≠ l·∫°i sau.");
      setGames([]);
    } finally {
      setLoading(false);
    }
  };

  // üîÑ T·ª± fetch khi ƒë·ªïi category
  useEffect(() => {
    fetchGames(activeCategory);
  }, [activeCategory]);

  return (
    <div className="game-page">
      {/* Breadcrumb */}
      <div className="breadcrumb">
        <span>Trang ch·ªß</span> <span>/</span>
        <span>S·∫£n ph·∫©m</span> <span>/</span>
        <span className="current">Game</span>
      </div>

      {/* B·ªô l·ªçc lo·∫°i game */}
      <div className="filter-row">
        {categories.map((cat) => (
          <button
            key={cat.value}
            className={`filter-btn ${
              activeCategory === cat.value ? "active" : ""
            }`}
            onClick={() => setActiveCategory(cat.value)}
          >
            {cat.label}
          </button>
        ))}
      </div>

      {/* B·ªô l·ªçc ph·ª• */}
      <div className="sub-filters">
        <select>
          <option>Th·ªÉ lo·∫°i</option>
          <option>H√†nh ƒë·ªông</option>
          <option>Phi√™u l∆∞u</option>
          <option>Th·ªÉ thao</option>
        </select>
        <select>
          <option>S·ªë ng∆∞·ªùi ch∆°i</option>
          <option>1 Ng∆∞·ªùi</option>
          <option>2 Ng∆∞·ªùi</option>
          <option>Multiplayer</option>
        </select>
        <select>
          <option>S·∫Øp x·∫øp m·∫∑c ƒë·ªãnh</option>
          <option>Gi√° tƒÉng d·∫ßn</option>
          <option>Gi√° gi·∫£m d·∫ßn</option>
          <option>M·ªõi nh·∫•t</option>
        </select>
      </div>

      {/* L∆∞·ªõi s·∫£n ph·∫©m */}
      {loading ? (
        <p>‚è≥ ƒêang t·∫£i game...</p>
      ) : error ? (
        <p className="error">{error}</p>
      ) : games.length === 0 ? (
        <p>Kh√¥ng c√≥ game n√†o.</p>
      ) : (
        <div className="game-grid">
          {games.map((game) => (
            <div key={game.id} className="game-card">
              <img src={game.Image} alt={game.Name} />
              <h3>{game.Name}</h3>
              <span className="platform">{game.series}</span>
              <p className="price">
                {game.Price !== undefined && game.Price !== null
                  ? `${Number(game.Price).toLocaleString("vi-VN")}‚Ç´`
                  : "Li√™n h·ªá"}
              </p>
            </div>
          ))}
        </div>
      )}
    </div>
  );
}
